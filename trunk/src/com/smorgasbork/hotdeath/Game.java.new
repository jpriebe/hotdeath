package com.smorgasbork.hdu;

import java.util.Random;

public class Game {
	public static boolean FamilyFriendly = false;

	public static final int MAX_NUM_CARDS = 216;
	
	public static final int SEAT_SOUTH = 1;
	public static final int SEAT_WEST = 2;
	public static final int SEAT_NORTH = 3;
	public static final int SEAT_EAST = 4;
	
	public static final int DIR_CLOCKWISE = 1;
	public static final int DIR_CCLOCKWISE = 2;
	
	public static final int GAMESTATE_PLAYING_CARDS = 1;
	public static final int GAMESTATE_WAITING_FOR_DRAW = 1;
	public static final int GAMESTATE_WAITING_FOR_COLOR_SEL = 1;
	
	private GameTable	m_GT;
	private GameOptions m_GO;
	private int			m_GameState;
	private Player[]	m_Players;
	private int[]		m_Score;

	private Player		m_StartPlayer;
	private Player		m_CurrPlayer;
	private Player      m_NextPlayerPreset;
	private Player		m_Dealer;
	private Card		m_CurrCard;
	private Card		m_PrevCard;
	private CardDeck	m_Deck;
	private CardPile    m_DrawPile;
	private CardPile    m_DiscardPile;
	private Card		m_LastCardClicked;
	private int			m_numCardsPlayed;
	private int[]		m_cardsPlayedMask;
	private int			m_direction;
	private int         m_currColor;
	private int			m_cardsPlayed;

	private Penalty     m_Penalty;
	
	private boolean m_lastCardCheckedIsDefender = false;
	
	public void SetGameTable (GameTable gt)
	{
		m_GT = gt;
	}

	public Player GetDealer()
    {
        return m_Dealer;
    }

	public Player GetStartPlayer()
    {
        return m_StartPlayer;
    }

	public Player GetCurrPlayer()
    {
        return m_CurrPlayer;
    }

	public Player GetPlayer(int i)
    {
        return m_Players[i];
    }

	public Card GetLastPlayedCard()
    {
        return m_CurrCard;
    }

	public int GetNumCardsPlayed()
    {
        return m_numCardsPlayed;
    }

	public int GetCardsPlayedMask (int suit)
    {
        return m_cardsPlayedMask[suit - 1];
    }

	public CardPile GetDrawPile()
    {
        return m_DrawPile;
    }

	public CardPile GetDiscardPile()
    {
        return m_DiscardPile;
    }

	public CardDeck GetDeck ()
    {
        return m_Deck;
    }

	public int GetCurrColor()
    {
        return m_currColor;
    }

	public int GetDirection()
    {
        return m_direction;
    }

	public Penalty GetPenalty()
    {
        return m_Penalty;
    }

	
	public Game(GameOptions go)
	{
		m_GO = go;
		m_Penalty = null;

		m_Players = new Player[4];
		m_Score = new int[4];
		m_cardsPlayedMask = new int[4];		   
		
		m_Deck = null;
		m_DrawPile = null;
		m_DiscardPile = null;

		m_direction = DIR_CLOCKWISE;

		if (m_GO.GetComputer4th())
		{
			m_Players[0] = new ComputerPlayer (this, m_GO);
		}
		else
		{
			m_Players[0] = new HumanPlayer (this, m_GO);
		}

		m_Players[1] = new ComputerPlayer (this, m_GO);
		m_Players[2] = new ComputerPlayer (this, m_GO);
		m_Players[3] = new ComputerPlayer (this, m_GO);

		(m_Players[0]).SetSeat (SEAT_SOUTH);
		(m_Players[1]).SetSeat (SEAT_WEST);
		(m_Players[2]).SetSeat (SEAT_NORTH);
		(m_Players[3]).SetSeat (SEAT_EAST);

		(m_Players[0]).SetLeftOpp (m_Players[1]);
		(m_Players[1]).SetLeftOpp (m_Players[2]);
		(m_Players[2]).SetLeftOpp (m_Players[3]);
		(m_Players[3]).SetLeftOpp (m_Players[0]);

		(m_Players[0]).SetRightOpp (m_Players[3]);
		(m_Players[2]).SetRightOpp (m_Players[1]);
		(m_Players[1]).SetRightOpp (m_Players[0]);
		(m_Players[3]).SetRightOpp (m_Players[2]);

		m_GameState = 0;
		m_Score[0] = 0;
		m_Score[1] = 0;
		m_Score[2] = 0;
		m_Score[3] = 0;

	}


	public void ResetRound()
	{
		m_direction = DIR_CLOCKWISE;
		m_Deck =        new CardDeck ();
		m_DrawPile =    new CardPile ();
		m_DiscardPile = new CardPile ();
		m_cardsPlayed = 0;

		for (int i = 0; i < 4; i++) 
		{
			m_Players[i].ResetRound();
			m_cardsPlayedMask[i] = 0;
		}

		m_GT.ResetRound();
	}


	public void ResetGame()
	{
		for (int i = 0; i < 4; i++) 
		{
			m_Players[i].ResetGame();
		}
		m_GameState = 0;

		Random rgen = new Random();
		int dealer = rgen.nextInt(4);
		m_Dealer = m_Players[dealer];

		m_GT.ResetGame();
	}


	public void DealHands()
	{
		int i;
		
		m_Deck.Reset(m_GO.GetStandardRules(), m_GO.GetOneDeck());
		m_Deck.Shuffle();

		for (i = 0; i < 4; i++) 
		{
			((m_Players[i]).GetHand()).Reset();
		}

		Player p = m_Dealer.GetLeftOpp();
		int numdeal = (m_GO.GetStandardRules())
					? 7 
					: m_Dealer.GetNumCardsToDeal();

		for (i = 0; i < 4 * numdeal; i++) 
		{
			Card c = m_Deck.GetCard(i);

			if (p.GetSeat() == SEAT_SOUTH)
			{
				c.SetFaceUp(true);
			}
			else
			{
				c.SetFaceUp(false);
			}

			p.AddCardToHand (c);

			p = p.GetLeftOpp();
		}

		int cheatlevel = m_GO.GetCheatLevel();

		for (; i < m_Deck.GetNumCards(); i++) 
		{
			Card c = m_Deck.GetCard(i);

			// MWUAHAHAHA
			if (cheatlevel > 0) 
			{
				if (c.GetID() == Card.ID_RED_0_HD
					|| c.GetID() == Card.ID_RED_2_GLASNOST
					|| c.GetID() == Card.ID_RED_5_MAGIC
					|| c.GetID() == Card.ID_RED_D_SPREADER
					|| c.GetID() == Card.ID_YELLOW_69
					|| c.GetID() == Card.ID_GREEN_D_SPREADER
					|| c.GetID() == Card.ID_WILD_MYSTERY
					|| c.GetID() == Card.ID_GREEN_3_AIDS
					|| c.GetID() == Card.ID_WILD_DB
					|| c.GetID() == Card.ID_BLUE_2_SHIELD
					|| c.GetID() == Card.ID_GREEN_4_IRISH
					|| c.GetID() == Card.ID_WILD_DRAWFOUR
					) 
				{
					c.SetFaceUp(true);
					c = ((m_Players[SEAT_SOUTH - 1]).GetHand()).SwapCard(c);
					c.SetFaceUp(false);
					cheatlevel--;
				}
			}

			m_DrawPile.AddCard(c);
		}
		
		for (i = 0; i < 4; i++) 
		{
			Hand h = (m_Players[i]).GetHand();
			SortHand(h);
			m_GT.SetHand (i, h);
		}
		m_GT.RedrawTable ();
	}	


	public int RolloverDiscardPile()
	{
		int numPlayedCards = m_DiscardPile.GetNumCards();

		if (numPlayedCards > 1) 
		{
			Card topCard = m_DiscardPile.DrawCard();

			String msg;
			if (numPlayedCards > 2) 
			{
				msg = String.format (getString(R.string.msg_shuffling_discard), numPlayedCards - 1);
			}
			else 
			{
				msg = getString (R.string.msg_shuffling_discard_1);
			}
			
			m_GT.SetPlayerMessage (msg);
			m_GT.RedrawTable();
			Pause();
				
			for (int i = 1; i < numPlayedCards; i++) {
				Card tc = m_DiscardPile.DrawCard();
				tc.SetFaceUp(false);
				m_DrawPile.AddCard(tc);
			}
			m_DrawPile.Shuffle();
			m_DiscardPile.AddCard(topCard);

			return numPlayedCards - 1;
		}

		// we got here b/c there is only one card in the discard
		// pile, and it's the face up card, so we can't roll it over...
		m_GT.SetPlayerMessage (getString(R.string.msg_discard_empty));
		m_GT.RedrawTable();
		Pause();
		
		return 0;
	}


	public Card DrawCard ()
	{
		Card c = null;

		// if we purged the draw and discard piles on the last draw (like
		// a big draw 69), we might end up with no draw pile at all.
		if (m_DrawPile.GetNumCards() == 0) 
		{
			// try to roll over the discard pile
			if (RolloverDiscardPile() > 0) 
			{
				c = m_DrawPile.DrawCard();
			}
			else 
			{
			}

		}
		else 
		{
			c = m_DrawPile.DrawCard();
		}

		// do we need to reset the draw pile?  It's best to do this
		// immediately after we draw the last card in the draw pile
		// so that we don't have an empty draw pile on screen
		if (m_DrawPile.GetNumCards() == 0) 
		{
			RolloverDiscardPile();
		}

		return c;
	}


	public void StartRound()
	{
		ResetRound();
		m_StartPlayer = m_Dealer.GetLeftOpp();

		m_Penalty = new Penalty ();

		m_CurrCard = null;
		m_PrevCard = null;

		DealHands();

		for (int i = 0; i < 4; i++) 
		{
			Hand h = (m_Players[i]).GetHand();
			if (CheckForAllBastardCards(h)) 
			{
				GotAllBastardCards (m_Players[i]);
				return;
			}
		}
		do 
		{
			// FIXME!!! the dealer is supposed to eat penalties...
			if ((m_CurrCard = m_DrawPile.DrawCard()) != null) 
			{
				m_currColor = m_CurrCard.GetColor();
				m_DiscardPile.AddCard (m_CurrCard);
				m_CurrCard.SetFaceUp(true);
			}
		} while (m_currColor == Card.COLOR_WILD);

		m_CurrPlayer = m_StartPlayer;

		m_GT.RedrawTable();

		Pause();

		m_GameState = GAMESTATE_PLAYING_CARDS;
		m_StartPlayer = m_Dealer.GetLeftOpp();
		m_LastCardClicked = null;
		m_numCardsPlayed = 0;

		m_CurrPlayer = m_StartPlayer;
	}


	public void StartGame()
	{
		ResetGame();
		StartRound();
	}


	public Player GetNextPlayer ()
	{
		return GetNextPlayer (null);
	}
	
	public Player GetNextPlayer(Player currentplayer)
	{
		boolean notdone = true;

		if (currentplayer == null) 
		{
			currentplayer = m_CurrPlayer;
		}

		Player p = currentplayer;
		while (notdone) 
		{
			p = (m_direction == DIR_CLOCKWISE)
				? p.GetLeftOpp()
				: p.GetRightOpp();

			if (p.GetActive()) 
			{
				notdone = false;
			}
		}
		
		return p;
	}


	public Player NextPlayer()
	{
		m_CurrPlayer.ResetLastDrawn();

		Player p = GetNextPlayer();

		m_LastCardClicked = null;
		p.SetPassing(false);
		return p;
	}

	public void PlayerPass (Player p)
	{
		if (p != m_CurrPlayer)
		{
			return;
		}
		
		if (m_Penalty.GetType() != Penalty.PENTYPE_NONE) 
		{
			AssessPenalty();
		}

		if (m_CurrPlayer.GetLastDrawn() != null) 
		{
			m_CurrPlayer = NextPlayer();
		}

		// if the draw pile is empty, we'll try to pull cards from
		// the discard pile

		// QUESTION -- could this lead to deadlock?
		else if (m_DrawPile.GetNumCards() == 0) 
		{
			if (RolloverDiscardPile() < 1) 
			{
				m_CurrPlayer = NextPlayer();
			}
		}
		
		else if (m_CurrPlayer.DrawCard(m_LastCardClicked) != 0) 
		{
			String msg_player = String.format(getString (R.string.msg_player_draws_card), m_CurrPlayer.toString());
			if (m_CurrPlayer.GetSeat() != SEAT_SOUTH) 
			{
				m_GT.SetPlayerMessage(msg_player);
				m_GT.RedrawTable();
				Pause();
			}

			m_CurrPlayer.SetPassing(false);

			SortHand (m_CurrPlayer.GetHand());

			if (m_LastCardClicked != null)
			{
				msg_player = String.format(getString (R.string.msg_player_draw),  m_LastCardClicked.toString());
				if (m_CurrPlayer.GetHuman()) 
				{
					m_GT.SetPlayerMessage(msg_player);
					m_GT.RedrawTable();
					Pause();
				}
			}

			m_GT.RedrawTable();
			m_LastCardClicked = null;

			if (!((m_CurrPlayer.GetHand()).HasValidCards(this))) 
			{
				m_CurrPlayer = NextPlayer();
			}
		}

		m_CurrPlayer = NextPlayer();
	}

	public void PlayerThrowCard (Player p, Card c)
	{
		if (p != m_CurrPlayer)
		{
			return;
		}
		
		m_PrevCard = m_CurrCard;
		m_CurrCard = c;
		m_LastCardClicked = m_CurrPlayer.GetChangedLastClicked();
		m_cardsPlayed++;

		m_CurrCard.SetFaceUp(true);
		m_DiscardPile.AddCard(m_CurrCard);

		m_GT.SetPlayerMessage ("");
		m_numCardsPlayed++;

		m_currColor = m_CurrCard.GetColor();
		if (m_currColor == Card.COLOR_WILD) 
		{
			m_currColor = m_CurrPlayer.ChooseColor();
		}

		HandleSpecialCards();

		m_LastCardClicked = null;

		// if previous player set us up, and we did not throw something
		// that would negate the penalty, then we get penalized now
		if ((m_Penalty.GetType() != Penalty.PENTYPE_NONE)
			&& (m_Penalty.GetVictim() == m_CurrPlayer)) 
		{
			AssessPenalty();
		}

		// go to next player
		if (m_NextPlayerPreset != null) 
		{
			m_CurrPlayer = m_NextPlayerPreset;
		}
		else 
		{
			m_CurrPlayer = NextPlayer();
		}

		// if we just threw something that set up the next player, and he has
		// no defender, hit him now
		if (m_Penalty.GetType() != Penalty.PENTYPE_NONE) 
		{
			if (m_GO.GetStandardRules()) 
			{
				AssessPenalty();
			}
			else 
			{
				if (CheckForDefender(m_CurrPlayer.GetHand())) 
				{
				}
				else 
				{
					AssessPenalty();
				}
			}
		}

		m_GT.RedrawTable();
	}
	
	public void AdvanceRound()
	{
		for (int i = 0; i < 4; i++) 
		{
			Hand h = (m_Players[i]).GetHand();
			
			if (CheckForAllBastardCards(h)) 
			{
				GotAllBastardCards (m_Players[i]);
				return;
			}

			// check for a winner
			if (h.GetNumCards() == 0) 
			{
				if (m_Penalty.GetType() == Penalty.PENTYPE_NONE) 
				{
					FinishRound(m_Players[i]);
				}
			}
		}
	}


	boolean GetLastCardCheckedIsDefender ()
	{
		return m_lastCardCheckedIsDefender;
	}
	
	boolean CheckCard(Hand h, Card c, boolean interactive)
	{
		if (!(h.IsInHand(c))) return false;

		int value = m_CurrCard.GetValue();
		int id = m_CurrCard.GetID();

		int cvalue = c.GetValue();
		int cid = c.GetID();

		boolean bHasMatch = h.HasColorMatch (m_currColor);

		m_lastCardCheckedIsDefender = true;

		if (m_Penalty.GetType() != Penalty.PENTYPE_NONE)
		{
			int tid = m_Penalty.GetOrigCard().GetID();
			int pvalue = m_Penalty.GetOrigCard().GetValue();

			// if the penalty's original card is not the current
			// card, we're dealing with defenders.  At this point, we
			// can only throw defenders (we can't stack more)
			boolean defenderAlreadyThrown = (m_Penalty.GetOrigCard() != m_CurrCard);

			// can play aids, fuckyou, and holydefender on various cards
			if (((cid == Card.ID_BLUE_0_FUCKYOU) 
				|| (cid == Card.ID_RED_0_HD)
				|| (cid == Card.ID_GREEN_3_AIDS))
				&& ((pvalue == Card.VAL_WILD_DRAWFOUR) 
				   || (tid == Card.ID_GREEN_0_QUITTER)
				   || (tid == Card.ID_RED_2_GLASNOST)))
			{
				return true;
			}

			// assuming we're not dealing with a defender on top of the
			// draw four, we can stack drawfours (except on the harvester
			// of sorrows and mystery)
			if (!(m_GO.GetStandardRules())) {
				if (!defenderAlreadyThrown
					&& (pvalue == Card.VAL_WILD_DRAWFOUR) 
					&& (tid != Card.ID_WILD_HOS) && (tid != Card.ID_WILD_MYSTERY)) {
					if (cvalue == Card.VAL_WILD_DRAWFOUR) 
					{
						return true;
					}
				}
			}

			// magic 5 is a defender against the hot death wild card only
			// (although it can be played on any card)
			if ((tid == Card.ID_WILD_HD) && (cid == Card.ID_RED_5_MAGIC)) 
			{
				return true;
			}

			return false;
		}
		
		m_lastCardCheckedIsDefender = false;

		// if player holds 69, he can throw 6s on 9s and vice-versa
		if (((cvalue == 6) && (value == 9)) || ((cvalue == 9) && (value == 6))) 
		{
			for (int i = 0; i < h.GetNumCards(); i++) 
			{
				Card tc = h.GetCard(i);
				if (tc.GetID() == Card.ID_YELLOW_69) 
				{
					return true;
				}
			}
		}

		if (cid == Card.ID_YELLOW_0_SHITTER) 
		{
			if ((id == Card.ID_RED_0_HD) 
			   || (id == Card.ID_RED_5_MAGIC)
			   || (h.GetNumCards() == 1))
			{				
				return true;
			}
			else 
			{
				return false;
			}
		}

		// 69 can be played on 6 or 9; likewise, 6 or 9 can be played on 69
		if ((id == Card.ID_YELLOW_69) && ((cvalue == 6) || (cvalue == 9))) return true;
		if ((cid == Card.ID_YELLOW_69) && ((value == 6) || (value == 9))) return true;

		// can play magic red 5 on any card
		if (cid == Card.ID_RED_5_MAGIC) return true;

		// the variants of D, S, and R
		if ((value == Card.VAL_D) && (cvalue == Card.VAL_D_SPREAD)) return true;
		if ((value == Card.VAL_D_SPREAD) && (cvalue == Card.VAL_D)) return true;
		if ((value == Card.VAL_R) && (cvalue == Card.VAL_R_SKIP)) return true;
		if ((value == Card.VAL_R_SKIP) && (cvalue == Card.VAL_R)) return true;
		if ((value == Card.VAL_S) && (cvalue == Card.VAL_S_DOUBLE)) return true;
		if ((value == Card.VAL_S_DOUBLE) && (cvalue == Card.VAL_S)) return true;

		if (m_GO.GetStandardRules()) 
		{
			// cannot play wild draw four if you've got a matching card
			if (bHasMatch && (c.GetValue() == Card.VAL_WILD_DRAWFOUR)) 
			{
				return false;
			}
		}

		// cards of same color, wild cards, or cards of equal value
		if ((c.GetColor() == m_currColor) || (c.GetColor() == Card.COLOR_WILD)
				|| (cvalue == value)) {
			return true;
		}

		return false;
	}


	public void CardClicked(Card c)
	{
		m_LastCardClicked = c;
	}


	public int FireTimer()
	{
		switch (m_GameState) {
		case GAMESTATE_PLAYING_CARDS:
			AdvanceRound();
			break;

		default:
			break;
		}
		return 1;
	}

	public void FinishRound(Player p)
	{
		m_GameState = 0;

		m_GT.RedrawTable();

		String msg = String.format (getString(R.string.msg_declare_round_winner), p.toString());
		m_Dealer = p;

		m_GT.SetStatusMessage (msg);
		m_GT.RedrawTable();

		CalculateScore(p);
		Pause();

		m_GT.RedrawTable();

		for (int i = 0; i < 4; i++) 
		{
			((m_Players[i]).GetHand()).SetFaceUp(true);
			SortHand ((m_Players[i]).GetHand());
		}
		m_GT.DisplayScore(m_Players);

		int minScore = 1000000;
		int minPlayer = 0;
		boolean bGameOver = false;
		int gameEndScore = (m_GO.GetStandardRules()) ? 500 : 1000;

		for (int i = 0; i < 4; i++) 
		{
			if (m_Players[i].GetTotalScore() < minScore) 
			{
				minScore = m_Players[i].GetTotalScore();
				minPlayer = i;
			}
			if (m_Players[i].GetTotalScore() >= gameEndScore) 
			{
				bGameOver = true;
			}
		}

		if (bGameOver) 
		{
			msg = String.format (getString(R.string.msg_declare_game_winner), m_Players[minPlayer].toString());
			m_GT.SetStatusMessage (msg);
			m_GT.RedrawTable();
		}

		else 
		{
			m_GT.SetStatusMessage ("");
			
			StartRound();
		}
	}


	void CalculateScore(Player pWinner)
	{
		int[] newscore = new int[4];
		int i;
		
		int maxscore = 0;
		for (i = 0; i < 4; i++) 
		{
			Hand h = (m_Players[i]).GetHand();
			newscore[i] = h.CalculateValue(true);
			if (newscore[i] > maxscore) 
			{
				maxscore = newscore[i];
			}

		}

		// if a player has the shitter, he gets the worst score of all hands
		for (i = 0; i < 4; i++) 
		{
			Hand h = (m_Players[i]).GetHand();
			for (int j = 0; j < h.GetNumCards(); j++) 
			{
				Card c = h.GetCard(j);
				if (c.GetID() == Card.ID_YELLOW_0_SHITTER) 
				{
					newscore[i] = maxscore;
				}
			}

			(m_Players[i]).SetLastScore(newscore[i]);
			
			if (m_Players[i] == pWinner)
			{
				(m_Players[i]).SetLastVirusPenalty(0);
			}
			else
			{
				(m_Players[i]).SetLastVirusPenalty(m_Players[i].GetVirusPenalty());
			}

			(m_Players[i]).SetTotalScore ((m_Players[i]).GetTotalScore()
											+ newscore[i] 
											+ m_Players[i].GetLastVirusPenalty());
		}

	}



	public void SortHand (Hand h)
	{
		Card[] cards = new Card[MAX_NUM_CARDS];
		int i;

		// sort according to deck order, but do faceup cards first
		int p = 0;
		Card[] cd = m_Deck.GetCards();
		for (i = 0; i < m_Deck.GetNumCards(); i++) 
		{
			Card c = cd[i];
			if (c.GetHand() == h && c.GetFaceUp()) 
			{
				cards[p++] = c;
			}
		}
		
		for (i = 0; i < m_Deck.GetNumCards(); i++) 
		{
			Card c = cd[i];
			if (c.GetHand() == h && !(c.GetFaceUp())) 
			{
				cards[p++] = c;
			}
		}

		h.ReorderCards(cards);
	}


	public int PromptForDeal()
	{
		return m_GT.PromptForDeal();
	}

	public int PromptForPlayer()
	{
		return m_GT.PromptForPlayer();
	}

	void PromptForPlay()
	{
		m_GT.SetPlayerMessage (getString(R.string.msg_your_play));
		m_GT.RedrawTable();
	}

	void PromptUser(String msg)
	{
		m_GT.SetPlayerMessage (msg);
		m_GT.RedrawTable();
	}


	void PromptForDraw()
	{
		m_GT.SetPlayerMessage (getString(R.string.msg_prompt_draw));
		m_GT.RedrawTable();
	}


	void ClearPrompt()
	{
		m_GT.SetPlayerMessage ("");
		m_GT.RedrawTable();
	}



	int PromptForColor()
	{
		return m_GT.PromptForColor();
	}


	// this routine looks in the hand for a card 
	// like the Blue Shield
	public boolean CheckForShield(Hand h)
	{
		for (int i = 0; i < h.GetNumCards(); i++) 
		{
			int id = (h.GetCard(i)).GetID();
			
			if (id == Card.ID_BLUE_2_SHIELD) 
			{
				(h.GetCard(i)).SetFaceUp(true);
				return true;
			}
		}

		return false;
	}



	/* check for defenders against stacked draw 4s
	     - Fuck You
		 - Holy Defender
		 - Virus card
		 - Harvester of Sorrows
	*/
	public boolean CheckForDefender(Hand h)
	{
		Card c = m_Penalty.GetOrigCard();
		int prevID = c.GetID();
		int prevVal = c.GetValue();

		// if the penalty's original card is not the current
		// card, we're dealing with defenders.  At this point, we
		// can only throw defenders (we can't stack more)
		boolean defenderAlreadyThrown = (c != m_CurrCard);

		// we can stack on all draw fours except HOS and mystery draw
		if ((prevVal == Card.VAL_WILD_DRAWFOUR) && (prevID != Card.ID_WILD_HOS)) 
		{
			for (int i = 0; i < h.GetNumCards(); i++) 
			{
				int id = (h.GetCard(i)).GetID();
				int val = (h.GetCard(i)).GetValue();
				
				// all draw fours can stack, except for mystery draw
				if (!defenderAlreadyThrown) {
					if ((val == Card.VAL_WILD_DRAWFOUR) && (prevID != Card.ID_WILD_MYSTERY) && (id != Card.ID_WILD_MYSTERY)) 
					{
						return true;
					}
				}

				// no stacking on AIDS -- it gets too messy because it would
				// throw the penalty back against the direction of play
				if (m_CurrCard.GetID() == Card.ID_GREEN_3_AIDS) return false;

				if (id == Card.ID_RED_0_HD) return true;
				if (id == Card.ID_BLUE_0_FUCKYOU) return true;
				if (id == Card.ID_GREEN_3_AIDS) return true;

				// magic red 5 nulls the hotdeath card
				if ((id == Card.ID_RED_5_MAGIC) && (prevID == Card.ID_WILD_HD)) 
				{
					return true;
				}
			}
		}

		if (m_Penalty.GetVictim() == m_CurrPlayer) 
		{
			if (prevID == Card.ID_RED_0_HD) 
			{
			}

			if (prevID == Card.ID_RED_2_GLASNOST) 
			{
				for (int i = 0; i < h.GetNumCards(); i++) 
				{
					int id = (h.GetCard(i)).GetID();
					if ((id == Card.ID_RED_0_HD) 
						|| (id == Card.ID_GREEN_3_AIDS)
						|| (id == Card.ID_BLUE_0_FUCKYOU)) 
					{
						return true;
					}
				}
			}

			if (prevID == Card.ID_GREEN_0_QUITTER) 
			{
				for (int i = 0; i < h.GetNumCards(); i++) 
				{
					int id = (h.GetCard(i)).GetID();
					if ((id == Card.ID_RED_0_HD) 
						|| (id == Card.ID_GREEN_3_AIDS)
						|| (id == Card.ID_BLUE_0_FUCKYOU)) 
					{
						return true;
					}
				}
			}

			if (prevID == Card.ID_YELLOW_1_MAD) 
			{
			}
		}

		return false;
	}


	public boolean CheckForAllBastardCards(Hand h)
	{
		int bastardCount = 0;
		for (int i = 0; i < h.GetNumCards(); i++) 
		{
			Card c = h.GetCard(i);

			int id = c.GetID();

			if (id == Card.ID_RED_0_HD) bastardCount++;
			if (id == Card.ID_GREEN_0_QUITTER) bastardCount++;
			if (id == Card.ID_BLUE_0_FUCKYOU) bastardCount++;
			if (id == Card.ID_YELLOW_0_SHITTER) bastardCount++;
		}

		if (bastardCount == 4) 
		{
			return true;
		}
		
		return false;
	}


	public void GotAllBastardCards(Player p)
	{
		m_GameState = 0;

		String msg;
		msg = String.format (getString(R.string.msg_all_bastard_cards), p.toString());
		m_GT.SetPlayerMessage (msg);

		Hand h = p.GetHand();
		int numcards = h.GetNumCards();
		for (int i = 0; i < numcards; i++) 
		{
			Card c = h.GetCard(i);
			c.SetFaceUp(true);
		}

		m_GT.RedrawTable();
	}



	public int GetActivePlayerCount() 
	{
		int count = 0;
		for (int i = 0; i < 4; i++) 
		{
			if (m_Players[i].GetActive()) count++;
		}
		return count;
	}

	public void HandleSpecialCards()
	{
		int currVal = m_CurrCard.GetValue();
		int currID  = m_CurrCard.GetID();
		m_NextPlayerPreset = null;

		if (currVal == Card.VAL_R) 
		{
			m_direction = (m_direction == DIR_CLOCKWISE) ? DIR_CCLOCKWISE : DIR_CLOCKWISE;

			if (GetActivePlayerCount() == 2) 
			{
				m_CurrPlayer = NextPlayer();
			}
		}

		if (currVal == Card.VAL_R_SKIP) 
		{
			m_direction = (m_direction == DIR_CLOCKWISE) ? DIR_CCLOCKWISE : DIR_CLOCKWISE;

			m_CurrPlayer = NextPlayer();
		}

		if ((currVal == Card.VAL_S)
			|| (currVal == Card.VAL_S_DOUBLE)) 
		{
			m_CurrPlayer = NextPlayer();
		}

		// double skip (only if more than 2 players left in game)
		if ((currVal == Card.VAL_S_DOUBLE) && (GetActivePlayerCount() > 2)) 
		{
			m_CurrPlayer = NextPlayer();
		}

		if (currVal == Card.VAL_D) 
		{
			Player victim;
			victim = NextPlayer();

			ForceDraw(victim, 2);
			if (!(m_GO.GetStandardRules()))
			{
				m_CurrPlayer = NextPlayer();
			}
		}

		// spreaders
		if (currVal == Card.VAL_D_SPREAD) 
		{
			// by default, the player who threw the spreader will play
			// again, unless somebody's got the shield
			Player victim = m_CurrPlayer;
			m_NextPlayerPreset = m_CurrPlayer;
			for (int i = 0; i < 3; i++) 
			{
				victim = GetNextPlayer(victim);

				// once we've gone around the table, bail out
				if (victim == m_CurrPlayer) break;
				if (!victim.GetActive()) continue;

				if (CheckForShield(victim.GetHand())) {
					// somebody's got the shield
					m_NextPlayerPreset = victim;

					// FIXME: use resources
					String msg = victim.toString() + " has blue shield";
					m_GT.SetPlayerMessage(msg);
					m_GT.RedrawTable();

					Pause();

					ForceDraw(m_CurrPlayer, 2);

					continue;
				}

				ForceDraw(victim, 2);
			}
		}

		// check the wild draw fours
		if (currID == Card.ID_WILD_DRAWFOUR) 
		{
			m_Penalty.AddCards (m_CurrCard, 4, m_CurrPlayer, GetNextPlayer());
		}

		else if (currID == Card.ID_WILD_HD) 
		{
			m_Penalty.AddCards (m_CurrCard, 8, m_CurrPlayer, GetNextPlayer());
		}

		else if (currID == Card.ID_WILD_DB) 
		{
			Player p = m_CurrPlayer;

			if (GetActivePlayerCount() > 2) 
			{
				m_CurrPlayer = NextPlayer();
			}

			m_Penalty.AddCards (m_CurrCard, 4, p, GetNextPlayer());
		}

		else if (currID == Card.ID_WILD_HOS) 
		{
			m_Penalty.AddCards (m_CurrCard, 4, m_CurrPlayer, GetNextPlayer());
		}

		else if (currID == Card.ID_WILD_MYSTERY) 
		{
			int prevVal = m_PrevCard.GetValue();
			int prevID  = m_PrevCard.GetID();

			if (prevID == Card.ID_YELLOW_69) 
			{
				m_Penalty.AddCards(m_CurrCard, 69, m_CurrPlayer, GetNextPlayer());
			}
			else if (prevVal > 0 && prevVal < 10)
			{
				m_Penalty.AddCards(m_CurrCard, prevVal, m_CurrPlayer, GetNextPlayer());
			}
		}

		// check other special cards
		if ((currID == Card.ID_RED_0_HD) && (m_Penalty.GetVictim() == m_CurrPlayer)) 
		{
			m_Penalty.SetGeneratingPlayer(m_CurrPlayer);
			m_Penalty.SetVictim(GetNextPlayer());

			String msg = String.format (getString(R.string.msg_holy_defender), m_Penalty.GetVictim().toString());
			m_GT.SetPlayerMessage (msg);
			m_GT.RedrawTable();
			Pause();
		}

		if (currID == Card.ID_RED_2_GLASNOST) 
		{
			m_Penalty.SetFaceup(m_CurrCard, m_CurrPlayer, m_Players[m_CurrPlayer.ChooseVictim() - 1]);
		}

		// if the magic red 5 is played on the hot death wild, it nulls it
		if ((currID == Card.ID_RED_5_MAGIC) && (m_PrevCard.GetID() == Card.ID_WILD_HD)
			 && (m_Penalty.GetVictim() == m_CurrPlayer)) 
		{
			m_Penalty.Reset();

			String msg = getString(R.string.msg_magic_5);
			m_GT.SetPlayerMessage (msg);
			m_GT.RedrawTable();
			Pause();
		}

		if (currID == Card.ID_GREEN_0_QUITTER) 
		{
			if (GetActivePlayerCount() > 2) 
			{
				m_Penalty.SetEject(m_CurrCard, m_CurrPlayer, GetNextPlayer());
			}
		}

		if ((currID == Card.ID_GREEN_3_AIDS)
			&& (m_Penalty.GetVictim() == m_CurrPlayer)) 
		{
			Player g = m_Penalty.GetGeneratingPlayer();
			m_Penalty.SetVictim(g);
			m_Penalty.SetGeneratingPlayer(m_CurrPlayer);
			m_Penalty.SetSecondaryVictim(m_CurrPlayer);
			
			String msg = String.format(getString(R.string.msg_sharing_penalty), m_Penalty.GetVictim().toString());
			m_GT.SetPlayerMessage (msg);
			m_GT.RedrawTable();
			Pause();
		}

		if ((currID == Card.ID_BLUE_0_FUCKYOU)
			&& ((m_Penalty.GetVictim() == m_CurrPlayer) || (m_Penalty.GetSecondaryVictim() == m_CurrPlayer))) 
		{
			m_Penalty.SetVictim(m_Penalty.GetGeneratingPlayer());
			m_Penalty.SetSecondaryVictim(null);
			m_Penalty.SetGeneratingPlayer(m_CurrPlayer);

			String msg = String.format(getString(R.string.msg_sending_penalty), m_Penalty.GetVictim().toString());
			m_GT.SetPlayerMessage (msg);

			m_direction = (m_direction == DIR_CLOCKWISE) ? DIR_CCLOCKWISE : DIR_CLOCKWISE;

			m_GT.RedrawTable();

			Pause();
		}

		if (currID == Card.ID_YELLOW_1_MAD) 
		{
			if (GetActivePlayerCount() > 3) 
			{
				m_Penalty.SetEject(m_CurrCard, m_CurrPlayer, m_Players[m_CurrPlayer.ChooseVictim() - 1]);
				m_Penalty.SetSecondaryVictim(m_CurrPlayer);
			}
		}
	}

	public void AssessPenalty()
	{
		int i;
		
		if (m_Penalty.GetType() == Penalty.PENTYPE_NONE)
		{
			return;
		}
			
		Player pVictim = m_Penalty.GetVictim();
		Player pVictim2 = m_Penalty.GetSecondaryVictim();

		if (pVictim == null)
		{
			return;
		}

		Hand h = pVictim.GetHand();
		String msg;

		if (m_Penalty.GetType() == Penalty.PENTYPE_CARD) 
		{
			int numcards = m_Penalty.GetNumCards();
			if (pVictim2 != null)
			{
				// divide by 2 (and round up)
				numcards = (numcards + 1) / 2;
			}

			// check for the luck of the irish card (if numcards = 0, there's no point)
			if (numcards > 0) 
			{
				for (i = 0; i < h.GetNumCards(); i++) 
				{
					int id = (h.GetCard(i)).GetID();
					if (id == Card.ID_GREEN_4_IRISH) 
					{
						numcards--;
						h.GetCard(i).SetFaceUp(true);

						String msg_player = getString(R.string.msg_luck_of_irish);
						m_GT.SetPlayerMessage (msg_player);
						m_GT.RedrawTable();
						Pause();

						break;
					}
				}
			}

			ForceDraw(pVictim, numcards);
			m_CurrPlayer = pVictim;
			if (!(m_GO.GetStandardRules()))
			{
				m_CurrPlayer = NextPlayer();
			}
			
			if (pVictim2 != null) 
			{
				h = pVictim2.GetHand();
				numcards = (m_Penalty.GetNumCards() + 1) / 2;
				// check for the luck of the irish card
				for (i = 0; i < h.GetNumCards(); i++) 
				{
					int id = (h.GetCard(i)).GetID();
					if (id == Card.ID_GREEN_4_IRISH) 
					{
						numcards--;
						(h.GetCard(i)).SetFaceUp(true);
						break;
					}
				}
				ForceDraw(pVictim2, numcards);
			}
		}
		else if (m_Penalty.GetType() == Penalty.PENTYPE_FACEUP) 
		{
			h.SetFaceUp(true);

			if ((m_Players[SEAT_SOUTH - 1]).GetHuman()) 
			{
				msg = String.format (getString(R.string.msg_player_faceup), pVictim.toString());
				m_GT.SetPlayerMessage (msg);
				m_GT.RedrawTable();
				Pause();
			}

			if (pVictim2 != null) 
			{
				h = pVictim2.GetHand();
				for (i = 0; i < h.GetNumCards(); i++) 
				{
					Card c = h.GetCard(i);
					c.SetFaceUp(true);
				}
				if ((m_Players[SEAT_SOUTH - 1]).GetHuman()) 
				{
					msg = String.format (getString(R.string.msg_player_faceup), pVictim2.toString());
					m_GT.SetPlayerMessage (msg);
					m_GT.RedrawTable();
					Pause();
				}
			}

		}
		else if (m_Penalty.GetType() == Penalty.PENTYPE_EJECT) 
		{
			pVictim.SetActive(false);

			msg = String.format (getString(R.string.msg_player_ejected), pVictim.toString());
			m_GT.SetPlayerMessage (msg);
			m_GT.RedrawTable();
			Pause();
			Pause();

			if (pVictim2 != null) 
			{
				pVictim2.SetActive(false);

				msg = String.format (getString(R.string.msg_player_ejected), pVictim2.toString());
				m_GT.SetPlayerMessage (msg);
				m_GT.RedrawTable();

				Pause();
				Pause();
			}

			if ((m_CurrPlayer == pVictim) || (m_CurrPlayer == pVictim2)) 
			{
				m_CurrPlayer = NextPlayer();
			}

			// FIXME!!! My personal rule -- if we end up with only
			// one player left, that player wins
			if (GetActivePlayerCount() == 1) 
			{
				Hand th = m_CurrPlayer.GetHand();
				th.Reset();
				m_Penalty.Reset();
				Player pWinner = null;
				for (i = 0; i < 4; i++) 
				{
					if (m_Players[i].GetActive()) 
					{
						pWinner = m_Players[i];
					}
				}
				FinishRound(pWinner);
			}
		}

		m_Penalty.Reset();
	}


	public void Pause()
	{
		int delay = m_GO.GetPauseLength();
		
		try
		{
			if (delay == 0) 
			{
				Thread.sleep(700);
			}
			else if (delay == 1) 
			{
				Thread.sleep (1700);
			}
			else if (delay == 2)
			{
				Thread.sleep (4000);
			}
		}
		catch (InterruptedException e)
		{
			// do nothing for now...
		}
	}

	void ForceDraw(Player p, int numcards)
	{	
		String msg = String.format(getString(R.string.msg_player_drawing), p.toString(), numcards);
		m_GT.SetPlayerMessage (msg);

		m_GT.RedrawTable();

		Pause();

		for (int i = 0; i < numcards; i++) 
		{
			Card c = DrawCard();

			if (c != null) 
			{
				p.AddCardToHand(c);
				if ((p.GetSeat() == SEAT_SOUTH) || m_GO.GetFaceUp()) 
				{
					c.SetFaceUp(true);
				}
			}
		}

		SortHand (p.GetHand());

		m_GT.SetPlayerMessage ("");
		m_GT.RedrawTable();
	}

	/**
	 * Convenience function; lets us retrieve resource strings with minimal syntax;
	 * also lets the player objects retrieve strings without knowledge of the
	 * Activity/View/Context.
	 * @param resid
	 * @return
	 */
	public String getString(int resid)
	{
		return m_GT.getContext().getString(resid);
	}
}
